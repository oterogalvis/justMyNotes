Java
	javac
		To copile code.
	java 
		To execute code.
	//
		To comment.
	;
		To close everyline.
	CamelCase
		The first letter is lowercase and the second capitalize. Example: firstName
Example: "./example_00.java"
	printf
		Print formatted text. Use variables and special formatting instructions.
	%s
		Alloy string replacement. Example: "Hello, I'm %s", firstName
	%n
		New line (or /n).
	TIP
		First declare a variable using it's data type, like String.
		Then the set the variable un CamelCase.
		Last asing the value.
Example: "./example_01.java"
	runtime errors
		Errors that only can be found when the program is running.
	int
		Datatype for integers.
	System.exit(0)
		Allow you to exit the program.
	Primitive
		Special kind of datatype, they only give data. It's type in lowercase. 
	Object datatypes
		Non-primitive data types. They give methods or properties. It's type Capitalize. 
	Wrapper type or Boxer type
		Provide methods that can use to manipulate and produce primitive data.
	.readLine()
		Gets input.
Example: "./example_02.java"
	.equals()
		Is an Object superclass method. Use to comparate objects.
	.equalsIgnoreCase
		Equal than wether is upcase or downcase.
	||
		or
	&&
		and
	While loop structure
		do { "this" } while ("thisIsTrue")
		while (true) {"this"}
	.contains()
		Allow you to know if a string contain a specific element.
	.toLowerCase()
		Change to lowercase.
	.println()
		Print a line with a \n at the end. Likes puts in ruby.
Example: "./example_03.java"
	TIP
		Constans in uppercase.
	final keyword
		Final keyword make sure no one can change the value.
	static keyword
		Make a value accessible right of the class.
	void keyword
		It's assign to a method that return nothing.
	TIP
		To make a method that acept 0 to 1 argument you create two methods with the same name.
		Differents kind of addition:
			variable += 1 (The best and more recommended)
			variable++ (return variable and sum after)
			++variable (sum first and then return the update value)
		jshell: Shift + tab => autocomplete all the possible methods.
	exceptions
		To tell the user if there is any problem using our object.
	throw keyword
		To throw a exception.
	try - catch keyword
		To catch a exception.
	iae.getMessage()
		iea => IllegalArgumentException. Get the exception message.
Example: "./example_04.java"
	Separation of concerns
		Separate the displaying portion of the code from the game state and the behavior code. This allow us to use the game logic in differents types of mediums.
	TIP
		"" are for strings 
		'' are for char(characters)
		You can sum stings.
		Member variable: Can be create with a lowercase "m" at the beginning or can be call using "this."
	indexOf()
		Return the index of a specific char. If char not include in string return -1.
	charAt()
		Return the char of a specific index.
	length()
		Tell you how many chars are in the string.
	%d
		Alloy decimal replacement. Example: "The number is %d", getNumber()
	TIP
		Always limite your scope to the story you are working on.
	toCharArray();
		Breaks the string into an array of chars.
	forEachloop
		Loop over arrays.
		for (char letter : example.toCharArray()){}
	for loop
		for (initialization; termination; increment) {}
		for (int i = 99; i > 0; i--) {}
	break
		Exits the iteration.
	continue
		Stops executing the current iteration and start a new iteration if applicable.
	labels
		?? Use them sparingly, they are not common.
	return
		return and exit the method and iteration.
Example: "./Example_05.java"
	isLetter(x)
		Method that verify if the char 'x' is a letter. This method belong to the Character Wrapper.
	toLowerCase(x)
		Change a upcase letter to lowercase. This method belong to the Character Wrapper.
	toUpperCase(x)
		Change a lowercase letter to uppercase. This method belong to the Character Wrapper.
	isLowerCase(x)
		Returns true if the char is lowercase. This method belong to the Character Wrapper.
	isUpperCase(x)
		Returns true if the char is uppercase. This method belong to the Character Wrapper.
	TIP
		While loop using booleans and exceptions. Check Example_06_prompter.java
	Getters
		To get a private member.
		public String getName(){ return mName;}
	Setters
		You use a setter when you want to change the value of a field, after the object has been created.
		public void setName(String newName){ mName = newName;}
	Constructor(initialize)
		A constructor initialises an instance variable inside a class once a class is instantiated using the "new" Keyword.
		public ClassName(String newName){ mName = newName;}
	main(String[] args)
		The main class should have a main method which calls another classes, the classe that are not main should have a method with the same name that the class. The main method should be define as: public static void.
	args[0]
		A class can use the args[0] as the variable iside its method to use the first object in the array call args that is set when the program is executed.
	Array()
		List of elements.
	Types of variables
		Instance Variables (Non-Static Fields):
			Instance variables belong to an instance of a class. Another way of saying that is instance variables belong to an object, since an object is an instance of a class. Every object has it’s own copy of the instance variables. 
		Class Variables (Static Fields):
			Is any field declared with the static modifier; this tells the compiler that there is exactly one copy of this variable in existence, regardless of how many times the class has been instantiated.
		Local Variables:
			Variable that’s declared within the body of a method. Then you can use the variable only within that method. You can not use any kind of accessor (public, protected or private).
		Parameters:
Example: "./Example_06.java"
	TIP
		== is only for primitives (It can work with strings because the compiler create a single instance and makes all variables refer to the same instance, and keep all these variables in the "string pool", unless it's created using the constructor).
		equals() is only for objects.
	binary 
		10101011 = 0 2 4 6 8 16 32 64
		With 8 bits(== 1 byte), you can store just about any character (char) char A == 97, and char B is 98. 1024 bytes is 1KB, 1024 kilobytes is 1MB...
	packages
		Help us to make sure that our class names are distinguishable.
	reversed internet domain name
		Example: teamtreehouse.com => com.teamtreehouse
	%n
		Is new line in any operative system, is equal to \n in linux and \r in windows.
	immutable
		When an object cannot be changed, it is often referred to as, immutable.
	date
		Use date attributes and methods. Import java.util.Date.
	epoch time
		Number of milliseconds since January 1st, 1970.
	inheritance
		A class that is derived from another class is called a subclass (also a derived class, extended class, or child class). The class from which the subclass is derived is called a superclass (also a base class or a parent class).
		By doing that the child class inherit the public fields and the methods.
	TIP
		All the classes in Java inherit from a special type call object.
		\" use in order to print a quote inside a string.
	toString()
		Is an Object superclass method. In general, the toString method returns a string that texturally represents this object.
	@Override
		An annotation is used to help the compiler, at compile time, understand that you're intending to override a method that exist in the parent class. 
	typecasting
		Switching of a variable between types is called type conversion or type coercion or most commonly known as typecasting.
			Upcast. parentObject store a childObject:
				ParentClass parentObject = childObject
			Downcast. childObject store a parentObject:
				ChildClass childObject = (ChildClass) parentObject
			Create an array of objects:
				Object[] differentObjects = [instanceOfOne, instanceOfTwo]
			Cast elements from differentObjects array:
				((ClassOne) differentObjects[0]); => VALID: differentObjects[0] == instanceOfOne
				((ClassOne) differentObjects[1]); => INVALID: instanceOfTwo is not an instance of ClassOne.
			We neet to use 'instanceof' method before performing a downcast to avoid runtime errors:
				differentObjects[0] instanceof ClassOne => True
	instanceof
		Method return a boolean if the instance below to the sugested class.
Example: "./Example_07.java"
	.split()
		Split an String into an Array.
	Method chain
		Methods followed by others. oneSentence.toLowerCase().contains("words");
	TIP
		The length of an array is set at creation time, and is inmutable. We can change the value but we can't change the length of the array.
	compareTo()
		Method use to compare two items. if t > o => 1. if t < o => -1. if t = o => 0.
	Serialization
		Is the process of translating objects into a format that can be stored and recreated later in the same or different environment.
	import java.io.*;
		If we are going to use a bunch of imports from the java.io package we can simply put a star here and it will import everything that we need.
	deserialization
		The process of opening that object again at a later time, or even giving it to someone else for them to open up.
		Pending: https://teamtreehouse.com/library/java-data-structures/organizing-data/serialization
	serialver
		Program use to generate a code that will be use in the java class in order to avoid class incompatibility. Class incompatibility happen when you deserialize a instance wicth class was modify. 
		Example: serialver com.teamtreehouse.Example_07_package
Example: "./Example_08.java" & "./Example_08.java"
	JCF (Java Collections Framework)
		Grouping of tools in charge of storage and retrieval of data efficiency.
	Big O Notation
		Is the language we use for articulating how long an algorithm takes to run. It's how we compare the efficiency of different approaches to a problem.
	Generics
		It would be nice if we could write a single sort method that could sort the elements in an Integer array, a String array, or an array of any type that supports ordering.
		Java Generic methods and generic classes enable programmers to specify, with a single method declaration, a set of related methods, or with a single class declaration, a set of related types, respectively.
		Generics also provide compile-time type safety that allows programmers to catch invalid types at compile time.
		Example: <T>
	Collection<T>
		Collection of a generics(T), in the example "Collection<String>" this is a collection of Strings.
		When we implement the Comparable interface, the compareTo() method will take and object as variable, and then we need to cast the another object we want to compare into a Object class in order to avoid incompatibility between classes.
		Now if we implement Comparable<DesiredClass> there is no need to cast an object into a different class becouse the compareTo() method will take a DesiredClass instance.
	Comparable<T>
		Comparable helps you to sort a List of 'x' class. In order for .sort() to work you need to @Overrite the compareTo() method and specify how do you want a list of 'x' to be sort.
	TIP
		Never copy and paste code, always make a method compatible with similar purposes.
	Sets (java.util.Set)
		This interface works similar than a List, Set(HashSet) does not allow duplicates. When use Tree(TreeSet) the elemens are also unique and organize in alphabetical order.
	Maps (java.util.Map)
		Map provides a key value representation of data. Maps can be used for all sorts of applications, from counting to indexing.
	Iterate through a HashMap
	    for (String key : map.keySet()) { // ... }
	    for (Object value : map.values()) { // ... }
	    for (Map.Entry<String, Object> entry : map.entrySet()) { // ... }
Example: "./Example_09.java"
    throws Exception
        If the content of the method throws an Exception you can declared before the block. Example: private String promptAction() throws IOException {}
    trim()
        Take out the spaces at the beginning and end.
    Stack trace
        In simple terms, a stack trace is a list of the method calls that the application was in the middle of when an Exception was thrown.
    Switch
        Allows you to use case scenarios. Always break the case otherwise you will fall in the next case. Use default if any of the cases are meet.
    Queue
        Queues are used when you want to store elements prior to processing. They provide convenient methods for grabbing the next element and removing it from the list (poling).
        Example: Queue<Song> songQueue = new ArrayDeque<Song>();
    poll() - Queue method
        So what that will do is it's gonna take the next one that's available if there is one, else return null.
    TIP
        Good example of Serialization in this example_10 ~ SongBook
        You can see how to define a class inside a method in the example_10 ~ SongBook
    protected
        Is private for other clases and public for the clases in the same package.
